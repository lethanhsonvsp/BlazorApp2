@page "/"
@inject MotorManager Manager
@using BlazorApp2.Services
@rendermode InteractiveServer

<style>
    .grid-container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr; /* 3 cột */
        grid-auto-rows: auto;
        gap: 20px;
        padding: 10px;
    }

    .grid-item {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 15px;
        background: #f9f9f9;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.1);
    }

    /* Hàng 1: trạng thái (1 cột), điều khiển (2 cột) */
    .item-status {
        grid-column: span 1;
    }

    .item-control {
        grid-column: span 2;
    }

    .log-box {
        max-height: 250px;
        overflow-y: auto;
        font-family: monospace;
        background: #111;
        color: #0f0;
        padding: 10px;
        border-radius: 5px;
    }

    .tx {
        color: #0ff;
    }

    .rx {
        color: #0f0;
    }
</style>

<h3>Điều khiển Motor CiA402</h3>

<div class="grid-container">
    <!-- 1.1 Trạng thái -->
    <div class="grid-item item-status">
        <h3>Trạng thái</h3>
        <p>@(Manager.IsConnected ? "✅ Đã kết nối CAN" : "❌ Chưa kết nối")</p>

        <h5>Giá trị hiện tại</h5>
        <p>Vị trí: @position</p>
        <p>Vận tốc: @velocity</p>
        <p>Mô-men: @torque</p>
        <h3>Status: @statusDesc</h3>
    </div>

    <!-- 1.2 Các nút điều khiển -->
    <div class="grid-item item-control">
        <h5>Điều khiển</h5>

        <!-- Fault & Enable -->
        <div class="mb-3">
            <div class="btn-group mb-2" role="group">
                <button class="btn btn-primary" @onclick="DoConnect">Connect CAN</button>
                <button class="btn btn-secondary" @onclick="DoDisconnect">Disconnect CAN</button>
            </div>
            <div class="btn-group mb-2" role="group">
                <button class="btn btn-warning" @onclick="DoResetFault">Reset Fault</button>
                <button class="btn btn-secondary" @onclick="DoResetMotor">Reset Motor</button>
            </div>
            <div class="btn-group mb-2" role="group">
                <button class="btn btn-success" @onclick="DoReadEncoderResolution">Read Enc</button>
                <button class="btn btn-success" @onclick="DoEnableMotor">Enable Motor</button>
                <button class="btn btn-danger" @onclick="DoStopMotor">StopMotor</button>
                <button class="btn btn-info" @onclick="DoQuitMotor">QuitMotor</button>
                <button class="btn btn-warning" @onclick="DoDisableMotor">Disable Motor</button>
            </div>

        </div>


        <!-- Homing -->
        <div class="mb-3">
            <label>Homing Method</label>
            <div class="input-group">
                <input @bind="homingMethod" type="number" min="1" max="35" class="form-control" />
                <button class="btn btn-primary" @onclick="DoHoming">Bắt đầu Homing</button>
            </div>
        </div>

        <!-- Position -->
        <div class="mb-3">
            <label>Move to Position</label>
            <div class="input-group mb-1">
                <span class="input-group-text">Pos</span>
                <input @bind="targetPosition" type="number" class="form-control" />
                <span class="input-group-text">Vel</span>
                <input @bind="profileVel" type="number" min="1" max="5000" class="form-control" />
            </div>
            <div class="input-group mb-1">
                <span class="input-group-text">Acc</span>
                <input @bind="acceleration" type="number" min="1" max="5000" class="form-control" />
                <span class="input-group-text">Dec</span>
                <input @bind="deceleration" type="number" min="1" max="5000" class="form-control" />
                <button class="btn btn-primary" @onclick="DoMove">Move</button>
            </div>
        </div>

        <!-- Velocity -->
        <div class="mb-3">
            <label>Set Velocity</label>
            <div class="input-group">
                <input @bind="targetVel" type="number" min="1" max="5000" class="form-control" />
                <button class="btn btn-primary" @onclick="DoSetVelocity">Apply</button>
            </div>
        </div>

        <!-- Torque -->
        <div class="mb-3">
            <label>Set Torque</label>
            <div class="input-group">
                <input @bind="targetTorque" type="number" class="form-control" />
                <button class="btn btn-primary" @onclick="DoSetTorque">Apply</button>
            </div>
        </div>
    </div>

    <!-- 2.1 CANopen Send -->
    <div class="grid-item">
        <h5>CANopen Send (TX)</h5>
        <div class="log-box">
            @foreach (var log in txLogs)
            {
                <div class="tx">[@log.Timestamp:HH:mm:ss] → @log.Frame</div>
            }
        </div>
    </div>

    <!-- 2.2 CANopen Receive -->
    <div class="grid-item">
        <h5>CANopen Receive (RX)</h5>
        <div class="log-box">
            @foreach (var log in rxLogs)
            {
                <div class="rx">[@log.Timestamp:HH:mm:ss] ← @log.Frame</div>
            }
        </div>
    </div>

    <!-- 2.3 Log Message -->
    <div class="grid-item">
        <h5>Log Message</h5>
        <div class="log-box">
            @foreach (var log in logMessages)
            {
                <div>@($"[{log.Timestamp:HH:mm:ss}] {log.Msg}")</div>
            }
        </div>
    </div>
</div>

@code {
    int position = 0;
    double velocity = 0;
    short torque = 0;

    int homingMethod = 35;
    int targetPosition = 0;
    uint profileVel = 20;
    uint acceleration = 100;
    uint deceleration = 100;
    int targetVel = 0;
    short targetTorque = 0;

    private string statusDesc = "Đang chờ dữ liệu...";
    private System.Threading.PeriodicTimer? _timer;
    private CancellationTokenSource? _cts;

    List<CanLogEntry> txLogs = new();
    List<CanLogEntry> rxLogs = new();
    List<CanLogEntry> logMessages = new();

    System.Timers.Timer? timer;

    // lưu frame RX cuối cùng để tránh duplicate
    string? _lastRxFrame = null;

    protected override void OnInitialized()
    {
        // update position, velocity, torque
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += async (s, e) => await InvokeAsync(UpdateStatus);
        timer.Start();

        // update status description
        _cts = new CancellationTokenSource();
        _timer = new System.Threading.PeriodicTimer(TimeSpan.FromMilliseconds(500));
        _ = UpdateLoop(_cts.Token);

        // log handler
        Manager.OnCanLog += (entry) =>
        {
            InvokeAsync(() =>
            {
                if (entry.Direction == "TX")
                {
                    txLogs.Insert(0, entry);
                    if (txLogs.Count > 200) txLogs.RemoveAt(txLogs.Count - 1);
                }
                else if (entry.Direction == "RX")
                {
                    // chỉ log khi khác frame trước đó
                    if (_lastRxFrame != entry.Frame)
                    {
                        rxLogs.Insert(0, entry);
                        if (rxLogs.Count > 200) rxLogs.RemoveAt(rxLogs.Count - 1);
                        _lastRxFrame = entry.Frame;
                    }
                }

                // Log message (giữ tất cả)
                logMessages.Insert(0, entry);
                if (logMessages.Count > 200) logMessages.RemoveAt(logMessages.Count - 1);

                StateHasChanged();
            });
        };
    }

    async Task UpdateStatus()
    {
        try
        {
            await Task.Run(() =>
            {
                position = Manager.GetPosition();
                velocity = Manager.GetVelocity();
                torque = Manager.GetTorque();
            });
            StateHasChanged();
        }
        catch { }
    }

    private async Task UpdateLoop(CancellationToken token)
    {
        try
        {
            while (await _timer!.WaitForNextTickAsync(token))
            {
                statusDesc = Manager.GetStatusDescription();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (OperationCanceledException)
        {
            // ignore
        }
    }

    void DoHoming() => Manager.StartHoming((byte)homingMethod);
    void DoMove() => Manager.MoveToPosition(targetPosition, profileVel, acceleration, deceleration);
    void DoSetVelocity() => Manager.SetVelocity(targetVel);
    void DoSetTorque() => Manager.SetTorque(targetTorque);
    void DoResetFault() => Manager.ResetFault();
    void DoResetMotor() => Manager.ResetMotor();
    void DoEnableMotor() => Manager.ResetFaultAndEnable();
    void DoConnect() => Manager.Connect();
    void DoDisconnect() => Manager.Disconnect();
    void DoStopMotor() => Manager.StopMotor();
    void DoDisableMotor() => Manager.DisableMotor();
    void DoQuitMotor() => Manager.QuickStop();
    void DoReadEncoderResolution() => Manager.ReadEncoderResolution();

}
